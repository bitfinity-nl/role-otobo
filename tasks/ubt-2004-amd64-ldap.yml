---
# Title: OTOBO Ticket system
#
# Authtor: bitfinity-nl
# File: tasks/ubt-2004-amd64-ldap.yml
#
# Description:
#   OTOBO is the new free Open Source ticket system 
#   with strong functionality AND a great look.
#
# Source(s):
#   - https://doc.otobo.org/manual/admin/stable/en/content/users-groups-roles/agents.html
#

- name: "Add LDAP/AD configuration"
  blockinfile:
    path: /opt/otobo/Kernel/Config.pm
    marker: "    #<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: ".*#*Self.*{CheckMXRecord} = 0;"
    block: |2

          # -------------------------------------------------------------------------
          # -- Begin: LDAP-AD - Agent - Basic LDAP - Active Directory Auth BACKEND --
          # -------------------------------------------------------------------------
         
          # Authentication module ldap settting.
          $Self->{'AuthModule'} = 'Kernel::System::Auth::LDAP';
          $Self->{'AuthModule::LDAP::Host'} = '{{ otobo_ad_dc }}';
          $Self->{'AuthModule::LDAP::BaseDN'} = '{{ otobo_ad_basedn }}';
          $Self->{'AuthModule::LDAP::UID'} = '{{ otobo_ad_uid }}';

          # Bind DN to LDAP-Active Directory for searching accounts.
          $Self->{'AuthModule::LDAP::SearchUserDN'} = '{{ otobo_ad_searchuserdn }}';
          $Self->{'AuthModule::LDAP::SearchUserPw'} = '{{ otobo_ad_searchuserpw }}';
          
          # Check if the user is allowed to auth in a posixGroup.
          $Self->{'AuthModule::LDAP::GroupDN'} = '{{ otobo_ad_groupdn }}';
          $Self->{'AuthModule::LDAP::AccessAttr'} = 'member';
          $Self->{'AuthModule::LDAP::UserAttr'} = 'DN';

          # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
          $Self->{'AuthModule::LDAP::Params'} = {
              port => 389,
              timeout => 120,
              async => 0,
              version => 3,
          };

          # ------------------------------------------------------------------------
          # -- Eind: LDAP-AD - Agent - Basic LDAP - Active Directory Auth BACKEND --
          # ------------------------------------------------------------------------
          

          # ------------------------------------------------------------------------------------
          # -- Begin: LDAP-AD - Agent - Sync LDAP - Active Directory DB with OTOBO DB BACKEND --
          # ------------------------------------------------------------------------------------
         
          # Authentication module ldap settting.
          $Self->{'AuthSyncModule'} = 'Kernel::System::Auth::Sync::LDAP';
          $Self->{'AuthSyncModule::LDAP::Host'} = '{{ otobo_ad_dc }}';
          $Self->{'AuthSyncModule::LDAP::BaseDN'} = '{{ otobo_ad_basedn }}';
          $Self->{'AuthSyncModule::LDAP::UID'} = '{{ otobo_ad_uid }}';
          
          # Bind DN to LDAP-Active Directory for searching accounts.
          $Self->{'AuthSyncModule::LDAP::SearchUserDN'} = '{{ otobo_ad_searchuserdn }}';
          $Self->{'AuthSyncModule::LDAP::SearchUserPw'} = '{{ otobo_ad_searchuserpw }}';

          $Self->{'AuthSyncModule::LDAP::UserSyncMap'} = {
              UserFirstname => 'givenName',
              UserLastname  => 'sn',
              UserEmail     => 'mail',
          };

          # AuthSyncModule::LDAP::UserSyncInitialGroups
          # (sync following group with rw permission after initial create of first agent
          # login)
          $Self->{'AuthSyncModule::LDAP::UserSyncInitialGroups'} = [
              'users',
          ];
          
          # ----------------------------------------------------------------------------------
          # -- End: LDAP-AD - Agent - Sync LDAP - Active Directory DB with OTOBO DB BACKEND --
          # ----------------------------------------------------------------------------------

          # -------------------------------------------------------------------------
          # -- Begin: LDAP-AD - Customer - Basic LDAP - Active Directory Auth BACKEND --
          # -------------------------------------------------------------------------
         
          # Authentication module ldap settting.
          $Self->{'Customer::AuthModule'} = 'Kernel::System::CustomerAuth::LDAP';
          $Self->{'Customer::AuthModule::LDAP::Host'} = '{{ otobo_ad_dc }}';
          $Self->{'Customer::AuthModule::LDAP::BaseDN'} = '{{ otobo_ad_basedn }}';
          $Self->{'Customer::AuthModule::LDAP::UID'} = '{{ otobo_ad_uid }}';

          # Bind DN to LDAP-Active Directory for searching accounts.
          $Self->{'Customer::AuthModule::LDAP::SearchUserDN'} = '{{ otobo_ad_searchuserdn }}';
          $Self->{'Customer::AuthModule::LDAP::SearchUserPw'} = '{{ otobo_ad_searchuserpw }}';
          
          # Check if the user is allowed to auth in a posixGroup.
          #$Self->{'AuthModule::LDAP::GroupDN'} = '{{ otobo_ad_groupdn }}';
          #$Self->{'AuthModule::LDAP::AccessAttr'} = 'member';
          #$Self->{'AuthModule::LDAP::UserAttr'} = 'DN';

          # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
          $Self->{'Customer::AuthModule::LDAP::Params'} = {
              port => 389,
              timeout => 120,
              async => 0,
              version => 3,
          };

          # ------------------------------------------------------------------------
          # -- Eind: LDAP-AD - Customer - Basic LDAP - Active Directory Auth BACKEND --
          # ------------------------------------------------------------------------

          # ---------------------------------------------------------------------------------------
          # -- Begin: LDAP-AD - Customer - Sync LDAP - Active Directory DB with OTOBO DB BACKEND --
          # ---------------------------------------------------------------------------------------

          # CustomerUser
          # (customer user ldap backend and settings)
          $Self->{CustomerUser} = {
              Name => 'LDAP Backend',
              Module => 'Kernel::System::CustomerUser::LDAP',
              Params => {
                  # ldap host
                  Host => '{{ otobo_ad_dc }}',
                  # ldap base dn
                  BaseDN => '{{ otobo_ad_basedn }}',
                  # search scope (one|sub)
                  SSCOPE => 'sub',
                  # The following is valid but would only be necessary if the
                  # anonymous user does NOT have permission to read from the LDAP tree
                  UserDN => '{{ otobo_ad_searchuserdn }}',
                  UserPw => '{{ otobo_ad_searchuserpw }}',
                  # in case you want to add always one filter to each ldap query, use
                  # this option. e. g. AlwaysFilter => '(mail=*)' or AlwaysFilter => '(objectclass=user)'
                  AlwaysFilter => '',
                  # if the charset of your ldap server is iso-8859-1, use this:
      #            # SourceCharset => 'iso-8859-1',
                  # die if backend can't work, e. g. can't connect to server
                  Die => 0,
                  # Net::LDAP new params (if needed - for more info see perldoc Net::LDAP)
                  Params => {
                      port    => 389,
                      timeout => 120,
                      async   => 0,
                      version => 3,
                  },
              },
              # customer unique id
              CustomerKey => 'sAMAccountName',
              # customer #
              CustomerID => 'company',
              CustomerUserListFields => ['cn', 'mail'],
              CustomerUserSearchFields => ['sAMAccountName', 'cn', 'mail'],
              CustomerUserSearchPrefix => '',
              CustomerUserSearchSuffix => '*',
              CustomerUserSearchListLimit => 250,
              CustomerUserPostMasterSearchFields => ['mail'],
              CustomerUserNameFields => ['givenname', 'sn'],
              # Configures the character for joining customer user name parts. Join single space if it is not defined.
              CustomerUserNameFieldsJoin => '',
              # show customer user and customer tickets in the external interface
              CustomerUserExcludePrimaryCustomerID => 0,
              # add a ldap filter for valid users (expert setting)
      #       #CustomerUserValidFilter => '(!(description=gesperrt))',
              # admin can't change customer preferences
              AdminSetPreferences => 1,
              # cache time to live in sec. - cache any ldap queries
      #        CacheTTL => 0,
              Map => [
                  # note: Login, Email and CustomerID needed!
                  # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target, link class(es)
                  [ 'UserTitle',       Translatable('Title or salutation'), 'title',               1, 0, 'var', '', 1, undef, undef ],
                  [ 'UserFirstname',   Translatable('Firstname'),           'givenname',           1, 1, 'var', '', 1, undef, undef ],
                  [ 'UserLastname',    Translatable('Lastname'),            'sn',                  1, 1, 'var', '', 1, undef, undef ],
                  [ 'UserLogin',       Translatable('Username'),            'sAMAccountName',      1, 1, 'var', '', 1, undef, undef ],
                  [ 'UserEmail',       Translatable('Email'),               'mail',                1, 1, 'var', '', 1, undef, undef ],
                  [ 'UserCustomerID',  Translatable('CustomerID'),          'company',             0, 1, 'var', '', 1, undef, undef ],
                  # [ 'UserCustomerIDs', Translatable('CustomerIDs'),         'second_customer_ids', 1, 0, 'var', '', 1, undef, undef ],
                  [ 'UserPhone',       Translatable('Phone'),               'telephonenumber',     1, 0, 'var', '', 1, undef, undef ],
                  [ 'UserAddress',     Translatable('Address'),             'postaladdress',       1, 0, 'var', '', 1, undef, undef ],
                  [ 'UserComment',     Translatable('Comment'),             'description',         1, 0, 'var', '', 1, undef, undef ],

                  # this is needed, if "SMIME::FetchFromCustomer" is active
                  # [ 'UserSMIMECertificate', 'SMIMECertificate', 'userSMIMECertificate', 0, 1, 'var', '', 1, undef, undef ],

                  # Dynamic field example
                  # [ 'DynamicField_Name_X', undef, 'Name_X', 0, 0, 'dynamic_field', undef, 0, undef, undef ],
              ],
          };

          # -------------------------------------------------------------------------------------
          # -- End: LDAP-AD - Customer - Sync LDAP - Active Directory DB with OTOBO DB BACKEND --
          # -------------------------------------------------------------------------------------


          # --------------------------------------------------------
          # -- Begin: MariaDB - Customer - OTOBO Database BACKEND --
          # --------------------------------------------------------

          # 2. Customer user backend: DB
          $Self->{CustomerUser2} = {
              Name => 'Customer Database',
              Module => 'Kernel::System::CustomerUser::DB',
              Params => {
                  Table => 'customer_user',
              },
              # customer unique id
              CustomerKey => 'login',
              # customer #
              CustomerID => 'customer_id',
              CustomerValid => 'valid_id',
              CustomerUserListFields => ['first_name', 'last_name', 'email'],
              CustomerUserSearchFields => ['login', 'last_name', 'customer_id'],
              CustomerUserSearchPrefix => '',
              CustomerUserSearchSuffix => '*',
              CustomerUserSearchListLimit => 250,
              CustomerUserPostMasterSearchFields => ['email'],
              CustomerUserNameFields => ['title','first_name','last_name'],
              CustomerUserEmailUniqCheck => 1,
              Map => [
                  # note: Login, Email and CustomerID needed!
                  # var, frontend, storage, shown (1=always,2=lite), required, storage-type, http-link, readonly, http-link-target
                  [ 'UserTitle',      'Title',      'title',        1, 0, 'var', '', 0 ],
                  [ 'UserFirstname',  'Firstname',  'first_name',   1, 1, 'var', '', 0 ],
                  [ 'UserLastname',   'Lastname',   'last_name',    1, 1, 'var', '', 0 ],
                  [ 'UserLogin',      'Username',   'login',        1, 1, 'var', '', 0 ],
                  [ 'UserPassword',   'Password',   'pw',           0, 0, 'var', '', 0 ],
                  [ 'UserEmail',      'Email',      'email',        1, 1, 'var', '', 0 ],
                  [ 'UserCustomerID', 'CustomerID', 'customer_id',  0, 1, 'var', '', 0 ],
                  [ 'UserPhone',      'Phone',      'phone',        1, 0, 'var', '', 0 ],
                  [ 'UserFax',        'Fax',        'fax',          1, 0, 'var', '', 0 ],
                  [ 'UserMobile',     'Mobile',     'mobile',       1, 0, 'var', '', 0 ],
                  [ 'UserStreet',     'Street',     'street',       1, 0, 'var', '', 0 ],
                  [ 'UserZip',        'Zip',        'zip',          1, 0, 'var', '', 0 ],
                  [ 'UserCity',       'City',       'city',         1, 0, 'var', '', 0 ],
                  [ 'UserCountry',    'Country',    'country',      1, 0, 'var', '', 0 ],
                  [ 'UserComment',    'Comment',    'comments',     1, 0, 'var', '', 0 ],
                  [ 'ValidID',        'Valid',      'valid_id',     0, 1, 'int', '', 0 ],
              ],
              # default selections
              Selections => {
                  UserTitle => {
                      'Mr.' => 'Mr.',
                      'Mrs.' => 'Mrs.',
                  },
              },
          };

          # -------------------------------------------------------
          # -- End: MariaDB - Customer - OTOBO Database BACKEND --
          # -------------------------------------------------------


- name: "Add LDAP Active Directory administrative user to otobo"
  raw: sudo su - otobo -c "/opt/otobo/bin/otobo.Console.pl Admin::User::Add --user-name {{ otobo_ad_account }} --first-name {{ otobo_ad_firstname }} --last-name {{ otobo_ad_lastname }} --email-address {{ otobo_ad_email }} --quiet"
  ignore_errors: yes

- name: "Add agent adm_otobo to group admin/stats/users with rw permissions"
  raw: sudo su - otobo -c "/opt/otobo/bin/otobo.Console.pl Admin::Group::UserLink --user-name {{ otobo_ad_account }} --group-name {{ item }} --permission rw"
  with_items:
    - admin
    - stats
    - users
